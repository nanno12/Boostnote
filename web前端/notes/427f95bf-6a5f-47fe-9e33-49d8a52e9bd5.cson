createdAt: "2020-08-31T07:36:21.864Z"
updatedAt: "2020-08-31T07:54:45.842Z"
type: "MARKDOWN_NOTE"
folder: "4d6db505462d196c7fc0"
title: "Vue-router"
tags: [
  "Vue-router"
]
content: '''
  ## Vue-router 
  ### 全局路由钩子
  + router.beforeEach
  ```js
  router.beforeEach((to, from, next) => {
    console.log('全局前置守卫：beforeEach -- next需要调用') //一般登录拦截用这个,也叫导航钩子守卫
    if (path === '/login') {
      next()
      return
    }
    if (token) {
      next();
    } 
  })
  
  ```
  + router.beforeResolve (v 2.5.0+) 
  beforeEach 类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用 即在 beforeEach 之后调用
  + router.afterEach 
  全局后置钩子 在所有路由跳转结束的时候调用 这些钩子不会接受 next 函数也不会改变导航本身
  
  ### 组件路由钩子
  + beforeRouteEnter
  在渲染该组件的对应路由被确认前调用，用法和参数与 router.beforeEach 类似。next需要被主动调用,此时组件实例还未被创建，不能访问 this 可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数
  ```js
  beforeRouteEnter (to, from, next) {
    // 这里还无法访问到组件实例，this === undefined
    next( vm => {
      // 通过 `vm` 访问组件实例
    })
  }
  
  ```
  + beforeRouteUpdate (v 2.2+)
  在当前路由改变，并且该组件被复用时调用，可以通过 this 访问实例， next 需要被主动调用，不能传回调
  + beforeRouteLeave
  导航离开该组件的对应路由时调用，可以访问组件实例 this，nex t需要被主动调用，不能传回调
  
  ### 路由模式(设置 mode 属性:hash或 history)
  + Vue.$router
  `this.$router.push()`:跳转到不同的url，但这个方法回向history栈添加一个记录，点击后退会返回到上一个页面
  `this.$router.replace()`:不会有记录
  `this.$router.go(n)`:n可为正数可为负数。正数返回上一个页面,类似 `window.history.go(n)`
  + Vue.$route
  表示当前跳转的路由对象,属性有:
  `name`:路由名称
  `path`:路径
  `query`:传参接收值
  `params`:传参接收值
  `fullPath`:完成解析后的 URL，包含查询参数和 hash 的完整路径
  `matched`:路由记录副本
  `redirectedFrom`:如果存在重定向，即为重定向来源的路由的名字
  `this.$route.params.id`:获取通过 params 或/:id传参的参数
  `this.$route.query.id`:获取通过 query 传参的参数
  + router-view 的 key
  场景:由于 Vue 会复用相同组件, 即 /page/1 => /page/2 或者 /page?id=1 => /page?id=2 这类链接跳转时, 将不在执行created, mounted之类的钩子
  
  ```html
  //  这样组件的 created 和 mounted 就都会执行
  <router-view :key="$route.fullPath"></router-view>
  ```
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
