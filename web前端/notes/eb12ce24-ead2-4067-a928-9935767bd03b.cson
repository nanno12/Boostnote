createdAt: "2019-08-27T06:54:34.145Z"
updatedAt: "2019-08-27T08:03:00.841Z"
type: "MARKDOWN_NOTE"
folder: "4d6db505462d196c7fc0"
title: "自定义指令 定义概念 2019/8/27"
tags: [
  "vue_自定义指令"
]
content: '''
  ## 自定义指令 定义概念 2019/8/27
  ### 五个钩子函数
  	bind：		只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。
  	inserted：	被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。
  	update：	所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。
  	componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。
  	unbind：	只调用一次，指令与元素解绑时调用。
  ### 钩子函数参数
  	el：		指令所绑定的元素，可以用来直接操作 DOM 。
  	binding：	一个对象，包含以下属性：
  	  name：	指令名，不包括 v- 前缀。
  	  value：	指令的绑定值，（例如：v-my-directive="1 + 1" 中，绑定值为 2。）
  	  oldValue：	指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。
  	  expression：	字符串形式的指令表达式。（例如 v-my-directive="1 + 1" 中，表达式为 "1 + 1"。）
  	  arg：		传给指令的参数，可选。（例如 v-my-directive:foo 中，参数为 "foo"。）
  	  modifiers：	一个包含修饰符的对象。（例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。）
  	vnode：		Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。
  	oldVnode：	上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。
  	
  ###### 除了 el 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 dataset 来进行
  
  #### 局部
  ###### 和methods同级建立一个directives:{}方法,在里面写
  	pin（自定义指令名称）: {             
  		bind（自定义指令函数钩子）(el,binding,vnode) {   
  		}
  	}
  #### 全局
  ###### 在mian.js 中全局注册
  	Vue.directive('tack',{
  		bind(el,binding,vnode){}
  	})
  ###### 在.vue文件html使用
  	<p v-tack>I will now be tacked onto the page</p>
'''
linesHighlighted: []
isStarred: false
isTrashed: false
