createdAt: "2020-08-31T08:33:13.859Z"
updatedAt: "2020-08-31T09:02:48.924Z"
type: "MARKDOWN_NOTE"
folder: "4d6db505462d196c7fc0"
title: "vue总结"
tags: [
  "最强vue总结---面试开发全靠它了"
]
content: '''
  ## vue总结
  ### vue如何监听对象或者数组某个属性的变化
  this.$set(你要改变的数组/对象，你要改变的位置/key，你要改成什么value)
  ### 优点
  + 轻量级框架：
  只关注视图层，是一个构建数据的视图集合，大小只有几十KB
  + 简单易学：
  国人开发，中文文档，易于理解和学习
  + 双向数据绑定：
  保留angular的特点，在数据操作方面更为简单
  + 组件化：
  保留的react特点，实现了html封装重用，在构建单页面应用方面有着独特的优势
  + 视图数据结构分离：
  使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作
  + 虚拟dom：
  dom操作是非常消耗性能，不再使用原生的dom操作节点，极大解放dom操作，但具体操作的还是dom不过是换了另一种方式
  + 运行速度更快：
  相对于react而言，同样是操作虚拟dom就性能而言，vue存在很大的优势
  ### 请详细说下你对vue生命周期的理解
  > 总共分为8个阶段。创建前后，载入前后，更新前后，销毁前后
  + 创建前/后：
   在beforeCreate阶段，vue实例的挂载元素el和数据对象data都为undefined，还未初始化。
   在created阶段，vue实例的数据对象data有了，el为undefined，还未初始化。
  + 载入前/后：
  在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。
  在mounted阶段，vue实例挂载完成，data.message成功渲染。
  + 更新前/后：
  当data变化时，会触发beforeUpdate和updated方法
  + 销毁前/后：
  在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在
  
  ### 为什么vue组件中data必须是一个函数？
  对象为引用类型，当复用组件时，由于数据对象都指向同一个data对象，当在一个组件中修改data时，其他重用的组件中的data会同时被修改；而使用返回对象的函数，由于每次返回的都是一个新对象（Object的实例），引用地址不同，则不会出现这个问题
  ### 请说下封装 vue 组件的过程
  首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：效率低、难维护、复用性等问题。
  然后，使用Vue.extend方法创建一个组件，然后使用Vue.component方法注册组件。子组件需要数据，可以在props中接受定义。而子组件修改好数据后，想把数据传递给父组件。可以采用emit方法。
  
  ### v-on可以监听多个方法吗？
  ```js
  <input type="text" v-on="{ input:onInput,focus:onFocus,blur:onBlur, }">
  ```
  ### assets和static的区别
  这两个都是用来存放项目中所使用的静态资源文件。
  两者的区别：
  assets:中的文件在运行npm run build的时候会打包，简单来说就是会被压缩体积，代码格式化之类的。打包之后也会放到static中。
  static:中的文件则不会被打包。
  ### slot插槽
  很多时候，我们封装了一个子组件之后，在父组件使用的时候，想添加一些dom元素，这个时候就可以使用slot插槽了，但是这些dom是否显示以及在哪里显示，则是看子组件中slot组件的位置了。
  ### ajax请求代码应该写在组件的methods中还是vuex的actions中
  如果请求来的数据是不是要被其他组件公用，仅仅在请求的组件内使用，就不需要放入vuex 的state里。
  
  如果被其他地方复用，这个很大几率上是需要的，如果需要，请将请求放入action里，方便复用。
'''
linesHighlighted: [
  8
  3
  18
  31
  33
]
isStarred: false
isTrashed: false
